##############################
# RYAN BATES'S RAILSCASTS
# concepts learnt from episodes in ascending order
##############################

##############################
# ActiveRecord::Calculations
# http://api.rubyonrails.org/classes/ActiveRecord/Calculations.html
# sample calculations
##############################
Section.first.priority
Section.total(:priority)
Section.sum(:priority)
Section.minimum(:priority)
Section.maximum(:priority)
subject = Subject.first
subject.sections.first.priority
subject.sections.maximum(:priority)
# return the topmost priority from unfinished sections
subject.sections.where(complete: false).minimum(:priority)

##############################
# FIND CONDITIONS
# https://stackoverflow.com/questions/21435768/rails-console-find-users-by-array-of-ids
# http://guides.rubyonrails.org/active_record_querying.html#array-conditions
# sample queries
# see sections_controller.rb for eager loading
##############################
subject = Subject.first
# priority is null
subject.sections.where(priority: nil)
# will only return the first item on the list
subject.sections.find_by_priority(1..10)
# using a range
# following 2 are the same
subject.sections.where(["complete = ? and priority in (?)", false, (1..10).to_a])
subject.sections.where(["complete = ? and priority in (?)", false, 1..10])
subject.sections.where(complete: false).where(priority: 1..10)
# using an array for particular priorities
subject.sections.where(["complete = ? and priority in (?)", false, [3, 9]])
subject.sections.where(complete: false).where(priority: [3, 9])
# passing a hash condition
subject.sections.where({complete: false, priority: 1..10})

##############################
# EAGER LOADING FOR BETTER PERFORMANCE
# 
# 
# sample queries
# see products_controller.rb
# git commit -m 'Used eager loading on products and sections indices.'
##############################
def index
  # initial
  @products = Product.all
  # reduce the number of calls to the db by eager loading
  # use the name of the association, belongs_to :user in the Product model
  @products = Product.all.includes(:user)
  # add another
  # use the name of the association, has_many :categories in the Product model
  @products = Product.all.includes(:user, :categories)
end

##############################
# HAS MANY THROUGH CHECKBOXES
# 
# 1) products/_form.html.erb
# 2) products_controller.rb
# git commit -m 'Added categorisation.'
##############################
# 1
# returns nil if no checkbox is ticked; otherwise, it wont update the category_ids[] attr
hidden_field_tag "product[category_ids][]", nil
# note the [] after category_ids - important for passing a collection through the controller
# boolean at the end to tick those that were previously set
check_box_tag "product[category_ids][]", category.id, @product.categories.include?(category)
# 2
# permit the category_ids attribut with [] for the same reason as above
permit(..., category_ids: [])

##############################
# LOOPING THROUGH FLASH
# http://apidock.com/rails/ActionView/Helpers/TagHelper/content_tag
# application.html.erb
# git commit -m 'Updated flash message in the layout.'
##############################
# content_tag(name, content/option with block, options)
# returns an HTML block tag of type <name> surrounding the <content>
# add HTML attributes by passing an attributes has to options
# edit options according to css selector, eg, id: "flash-#{key}"
flash.each do |key, msg|
  content_tag :div, msg, id: key

##############################
# COUNTER CACHE COLUMN
# 1) subjects/index.html.erb
# size vs length vs count
# http://work.stevegrossi.com/2015/04/25/how-to-count-with-activerecord/
# http://mensfeld.pl/2014/09/activerecord-count-vs-length-vs-size-and-what-will-happen-if-you-use-it-the-way-you-shouldnt/
# 2) add_sections_count_to_subjects.rb (migration file)
# Ryan Bates's code is working, if it doesn't the first time, try rails db:reset and then reseed
# 3) section.rb
# git commit -m 'Added sections counter to subjects.'
##############################
# 1 
@subjects.each do |subject|
  pluralize(subject.sections.size, 'section'
# 2
# default to 0 to work properly
# add_column tablename, modelassociationname_count, type, default: 0
add_column :subjects, :sections_count, :integer, default: 0
# set the value of the count column in each current subject
# for no of tasks, used length rather than size
# size would use the counter cache column which would have its default value of zero
Subject.all.each do |s|
  s.update_attribute(:sections_count, s.sections.length)
# to avoid the possibility of caching column info,
# reset Subject column info since it's being modified in the same migration in which we add a column
Subject.reset_column_information
# 3
# tell Rails to use sections_count column as counter cache column
belongs_to :subject, counter_cache: true

##############################
# SEARCH BOX IN SECTIONS
# 1) section.rb
# 2) sections_controller.rb
# 3) products_controller.rb
# git commit -m 'Added search in sections from UI.'
##############################
# 1
# changed default scope to list incomplete sections then accdg to priorities.
# tried to add another scope using order() at the bottom of default_scope ordered by creation date but not working
# that another scope works only if default is commented/removed so i chained the 2 order methods
default_scope -> { order(complete: :asc).order(priority: :asc) }
# 2
# if using only the sql like search, N+.. queries are generated
# @sections = Section.where("title LIKE ? OR body LIKE ?", "%#{params[:search_param]}%", "%#{params[:search_param]}%")
# joins-select performs better, but i havent tried it w eager loading
# must specify which title the query belongs to as subject also has title attribute
@sections = Section.joins(:subject).select("sections.*, subjects.title as subject_title").where("sections.title LIKE ? OR sections.body LIKE ?", "%#{params[:search_param]}%", "%#{params[:search_param]}%")
# use subject_title in sections/index view
section.subject_title
# let user know if no match found; why is <% if @sections %> not working?
if @sections.present?

##############################
# XSS
# Rails 5 auto sanitizes contents from user
# https://stackoverflow.com/questions/7861971/generate-model-using-userreferences-vs-user-idinteger
##############################
# you can try to escape user input in the console
> CGI::escapeHTML("<script>alert(document.cookie);</script>")
=> "&lt;script&gt;alert(document.cookie);&lt;/script&gt;"
# user_id vs user:references in rails generate model
# both will add section_id when you run the migration
$ rails g model comment content:text section:integer
# but below will add a belongs_to :section in the Comment model
# ActiveRecord will assume that the foreign key is kept in the section_id column and it will use a model named Section to instantiate the related section
# below will also add an index on the new section_id column
$ rails g model comment content:text section:references

##############################
# IN_GROUPS_OF
#
# http://apidock.com/rails/Array/in_groups_of
##############################
# if list is not exactly divisible, it will throw a NoMethodError (undefined method `title' for nil:NilClass)
# pass the false flag as second argument to the in_groups_of method
@sections.in_groups_of(5, false) do |sections|

##############################
# GROUP_BY
#
# https://stackoverflow.com/questions/2683857/how-to-generate-a-random-date-and-time-between-two-dates
##############################
# 1) section.rb
# change default order to sort by deadline

##############################
# PRETTY PAGE TITLE 
#
# 
##############################
# 1) application.html.erb
# below does not work
# Base Title <%= yield(:title) || "Sub Title" %>
# this one works; note content_for?
<title>Co Corp Inc | <%= content_for?(:title) ? yield(:title) : "Kickstarter prism direct trade" %></title>
# shift page headers to application layout
# then use the title helper again in the body
<h1><%= yield :title %></h1>
# 2) application_helper.rb
# use content_for again
content_for(:title) { page_title }

##############################
# CUSTOMISING TIME FORMAT
#
# 
##############################
# try the following in rails c
>> sec = Section.first
>> sec.deadline.to_datetime
>> sec.deadline.to_date
>> sec.deadline.to_date.to_s
>> sec.deadline.to_date.to_s(:short)
>> sec.deadline.to_date.to_s(:long)
>> sec.deadline.to_date.to_s(:db)
>> Time.now.to_datetime.to_s(:db)
>> Time.now.to_datetime.strftime("due on %B %d at %I:%M %p")
# 1) sections/index.html.erb
# below shows 27 Oct 00:30
section.deadline.to_s(:short)
# below shows November 11, 2016 00:30
section.deadline.to_s(:long)
# below shows db format 2016-11-11 00:30:29
section.deadline.to_s(:db)
# create your own format
section.deadline.strftime("due on %B %d at %I:%M %p")
# make it reusable by refactoring
# could create a helper method or add it to the Section model
# or add a new format to the to_s method (instead of :short, :long or :db)
section.deadline.to_s(:deadline_format)
# add the new date format to config/initializers since it needs to be loaded before the rest of the app
# the various date formats are stored in a hash in the Time class called DATE_FORMATS
# the hash's keys being strings representing the format
# RESTART the app or it will use the default to_s method
Time::DATE_FORMATS[:deadline_format] = "due on %B %d at %I:%M %p"

##############################
# CREATING PLUGINS
# 
# skipped
##############################

##############################
# NAMED ROUTES
# 
# 1) sections/index.html
# 2) routes.rb
##############################
# url vs path
# 1)
# below outputs absolute path (http://localhost:3000/sections)
sections_url
# below outputs relative path (/sections)
sections_path
# 2)
# below is same as get "sections/:year/:month" => "sections#archive", as: :section_archive
get "/sections/:year/:month", to: "sections#archive", as: :section_archive
# 1)
# both gives /sections/2016/11
section_archive_path(2016, 11)
section_archive_path(year: 2016, month: 11)

##############################
# CUSTOM RESTful ROUTES
# 
# 1) sections_controller.rb
# 2) routes.rb
# 3) section.rb
# 4) sections/index
##############################
# 1)
# create custom action in sections controller
# sample is for completed sections
@sections = Section.where(complete: true)

# 2)
# routes specs execute from top to bottom
# must place below line before resources :sections so that it's the first matching route
# otherwise, it's the show method that's being called and throws RecordNotFound error
# specify a get request
# as: changes path name to completed_sections_path, else it's sections_completed_path
get "/sections/completed", to: "sections#completed", as: :completed_sections_path
# instead of above, used collection routes inside resource :sections
# can add optional as: for named routes; eg, as: :finished gives finished_sections_path
collection do
  # get "completed", to: :completed, as: :finished
  get "completed", to: :completed
end
member do
  patch :complete
end
# eliminate the collections and member blocks by passing :on to a route since i dont have multiple member routes
get :completed, on: :collection
patch :complete, on: :member



# 1)
# if there's a completed_at column in sections table
# you can update it this way
def complete
  @section = Section.find(params[:id])
  @section.update_attribute(:completed_at, Time.now)
  flash[:notice] = "#{@section.title} marked as completed."
  redirect_to completed_sections_path  
end

# 3)
# set order by importance as normal scope so that different scopes can be used
scope :important,  -> { order(deadline: :asc).order(priority: :asc) }

# 4)
# changed layout from p's to table for each month
# used zebra striping and fixed table layout in sections.scss

##############################
# SIMPLE SEARCH FORM
# 
# https://railsforum.com/topic/936-difference-between-text-field-tag-and-text-field/
# 1) products/index
# 2) products_controller.rb
# 3) product.rb
##############################
# update seed file
# 1)
# form_tag simply creates a generic form, can be used with text_field_tag, no need to involve the model or db
# eg, when writing a form for password reset; user has to key in his email for the app to send notification to; no db involved
<%= form_tag password_reset_path do %>
  <%= text_field_tag :email %>
  <%= submit_tag %>
<% end %>
# form_for is a model backed form; it creates a form for a model object, it figures out what url and http method to use depending on whether the object is a new record or a saved record
# can be used with text_field (must be used w form_for) which requires an existing column in the db
<%= form_for @user do |f| %>
  <%= f.text_field :name %>
  <%= f.submit %>
<% end %>
# same pattern for these tags: 
  # file_field_tag / file_field
  # email_field_tag / email_field
  # text_area_tag / text_area
# by default, it'll submit a POST request (can check terminal when you render index, even without searching)
# the way RESTful routes work is that if you submit a post request to products_path, it thinks you're trying to create a project
# since we're just searching in projects index, use method: :get in the form_tag
# using the default post request will result in error: ActionController::ParameterMissing in ProductsController#create
<%= form_tag products_path, method: :get do %>
.
.
<% end %>
# make the form show the searched term(s) after searching
<%= form_tag products_path, method: :get do %>
  <%= text_field_tag :search, params[:search] %>
# commit param is included in the url because it's the name of the search button, see the page source
# remove by adding nil to name
  <%= submit_tag "Search", name: nil %>
<% end %>
# @products.count for showing the total no of products found
# @products.size for showing the no of products per page
# 2)
def index
  @products = Product.paginate(page: params[:page], per_page: 40).includes(:user, :categories).where("name LIKE ?", "%#{params[:search]}%")
end
# refactor the products controller by moving the db query to the model
@products = Product.paginate(page: params[:page], per_page: 40).includes(:user, :categories).search_for(params[:search])
# 3)
# use self or it throws NoMethodError in ProductsController#index
def self.search_for(keyword)
  where("name LIKE ?", "%#{keyword}%")
end
# default scope is alphabetical name
# if you prefer chronologically, may use order(id: :desc) to improve performace; search is faster since primary key is indexed

##############################
# MULTIBUTTON FORM
# 
# 1) subjects form partial
# 2) subjects_controller.rb
##############################
# 1)
# after rendering the form, the name of the button is submitted as one of the parameters (check terminal)
# by default it is "commit" => "..."
# you can change this in the form_for helper
<%= f.submit "Create", name: "create_button" %>..<% end %>
# re-render form, check the terminal, it now says Parameters: { ..., "create_button" = "Create", ...}
# add a button for previewing current inputs
<%= f.submit "Create", name: "create_button" %>
<%= f.submit "Preview", name: "preview_button" %>
# update subjects_controller.rb
# render new action whether preview button is clicked or save failed
def create
  @subject = Subject.new(subject_params)
  if params[:preview_button] || !@subject.save
    render 'new'
  else
    flash..
    redirect_to..
  end
end
# render edit action whether preview button is clicked or update failed
# fetch the current field inputs
def update
  # for preview button to work in edit mode, otherwise, preview renders and form switches to what was previously saved
  @subject.attributes = subject_params
  if params[:preview_button] || !@subject.update_attributes(subject_params)
    render 'edit'
  else
    flash..
    redirect_to..
  end
end
# change button name accdg to current action (new or edit)
<%= f.submit @subject.new_record? ? "Create" : "Update", name: "create_button" %>..<% end %>
# error_messages partial can be shared among resources
# <% if object.errors.any? %>
# make sure to pass the object when the form is rendered
<%= render 'shared/form', object: @subject %>..<% end %>
# or
<%= form_for @subject do |f| %>
  <%= render 'shared/form', object: f.object %>

##############################
# CUSTOM FIELD ERROR
# 
# https://stackoverflow.com/questions/13909393/overriding-actionviewbase-field-error-proc-in-rails 
# 1) config/initializer/custom_field_error.rb
##############################
# use the SO helper with bootstrap, add nokogiri gem

##############################
# BLOCKS IN VIEW
# 
# http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#method-i-concat
# you can create a custom form helper method that can handle conditional expressions too
# 1) application_helper.rb
# 2) subjects/show view
##############################
# form_for is a rails helper that accepts a block which you can pass html.erb to
# whenever you want to use block in a helper method, use concat to input text before and after the block output
# bec when you call yield, the results are output directly to the template
# 2)
# admin_area is a sample helper method
# in this eg, you want to show whatever's in this custom form only for admin users
admin_area do
# 1)
# make a method called admin_area
# use html_safe method to force the html to be rendered in the browser
def admin_area(&block)
  # check for condition; eg, <if admin?> if you have a boolean admin column
  if true
    # # using only concat
    # concat('<div class="admin">'.html_safe)
    # yield
    # concat('</div>'.html_safe)
    # using concat and capture, no need for yield
    concat content_tag :div, capture(&block), class: "admin"
  end
end

##############################
# CONDITIONAL VALIDATIONS
# 
# http://guides.rubyonrails.org/active_record_validations.html#conditional-validation
# 1) user.rb
##############################
# validation takes place every time a single model is saved
# otherwise do conditional validation
# 1)
# ensure presence of first_name but only on create action
validates_presence_of :first_name, on: :create
# eg, the user table has country and state columns and you want to validate the state only if country is US
validates_presence_of :country
# add which method to call when validations take place
validates_presence_of :state, if: :in_us?

def in_us?
  country == '<US></US>'
end

# to change the behaviour of the validation in the controller and not just based on user's attrs
# eg, just on the update password page and not every time the user is updated
# ***this is already handled by devise if installed
# anyway
validates_presence_of :password, on: :should_validate_password?
validates_presence_of :country
validates_presence_of :state, if: :in_us?
attr_accessor :updating_password  # the controller can set this to T/F

def should_validate_password?
  # if attr updating_password is true or if user is on registration page
  updating_password || new_record?
end

# in controller, in update password page
@user.updating_password = true
@user.save

# to just save and skip validations (dangerous)
@user.save(validate: false)

##############################
# GROUPING CONDITIONAL VALIDATIONS
# 
# http://guides.rubyonrails.org/active_record_validations.html#grouping-conditional-validations
# 1) user.rb
# http://guides.rubyonrails.org/v2.3.11/routing.html
# 2) routes.rb
##############################
validates_presence_of :password, if: :should_validate_password?
validates_confirmation_of :password, if: :should_validate_password?
validates_format_of :password, with: /^[^\s]+$/, if: :should_validate_password?

# remove duplications in the options (above have multiple validations that use one condition)
with_options if: :should_validate_password? do |user|
  user.validates_presence_of :password
  user.validates_confirmation_of :password
  user.validates_format_of :password, with: /^[^\s]+$/
end

# another example, still in user model
with_options if: :is_admin? do |admin|
  admin.validates :password, length: { minimum: 10 }
  admin.validates :email, presence: true
end

# route options
# to simplify defining groups of similar routes
# ***The importance of map.with_options has declined with the introduction of RESTful routes
map.with_options controller: 'sessions' do |session|
  session.login 'login', action: 'new'
  session.logout 'logout', action: 'destroy'
end
# another example from RoR guides
map.with_options :controller => 'photo' do |photo|
  photo.list '', :action => 'index'
  photo.delete ':id/delete', :action => 'delete'
  photo.edit ':id/edit', :action => 'edit'
end

##############################
# ROUTE GLOBBING
# 
# http://guides.rubyonrails.org/v2.3.11/routing.html#route-globbing
# 1) routes.rb
# 2) route_glob_controller.rb
##############################
# route globbing is a way to specify that a particular parameter should be matched to all the remaining parts of a route
# 1)
get '*path', to: "route_glob#index"
# 2)
# to show the params being passed
def index
  render text: params.inspect
end
# to show the absolute url
def index
  render text: request.url
end
# if-else was used in the index action for any RecordNotFound error
def index
  product = Product.where("name LIKE ?", "%#{params[:path]}%").first
  # if match is found, redirect to show page of product; otherwise, redirect to products list page
  if product
    redirect_to product_path(product)
  else
    redirect_to products_path
  end
end